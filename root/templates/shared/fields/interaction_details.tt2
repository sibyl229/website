<style>
	#cy {
        width: 750px;
        height: 750px;
        margin:0 auto;
        position: absolute;
    }

</style>
[%# If these values are asserted, they are given by Interaction->interactions,
otherwise find them in Interaction->interaction_details %]
[% TYPES = TYPES || interaction_details.data.types %]
[% NODES = NODES || interaction_details.data.nodes %]
[% EDGES = EDGES || interaction_details.data.edges %]
[% NTYPES = NTYPES || interaction_details.data.ntypes %]
[% CLASSTYPE = (CLASSTYPE == 'WBProcess') ? CLASSTYPE : OBJTYPE %]
[% PHENOTYPES = PHENOTYPES || interaction_details.data.phenotypes %]
[%
    # Legend supertypes specification #
    master = [
        { Physical => 1 },
        { Predicted => 1 },
        { Regulatory => [
            {'Positively Regulates' => 1},
            {'Negatively Regulates' => 1},
            { 'Change of localization' => 1 },
            { 'Change of expression level' => 1 },
            { 'Does Not Regulate' => 1},
            { 'Regulatory' => 1}
       ]},
        { Genetic => [
            { 'Genetic interaction' => 1 },
            { 'Negative genetic' => 1 },
            { 'Synthetic' => 1 },
            { 'Enhancement' => 1 },
            { 'Unilateral enhancement' => 1 },
            { 'Mutual enhancement' => 1 },
            { 'Suppression' => 1 },
            { 'Unilateral suppression' => 1 },
            { 'Mutual suppression' => 1 },
            { 'Asynthetic' => 1 },
            { 'Suppression enhancement' => 1 },
            { 'Epistasis' => 1 },
            { 'Maximal epistasis' => 1 },
            { 'Minimal epistasis' => 1 },
            { 'Suppression epistasis' => 1 },
            { 'Agonistic epistasis' => 1 },
            { 'Antagonistic epistasis' => 1 },
            { 'Oversuppression' => 1 },
            { 'Unilateral oversuppression' => 1 },
            { 'Mutual oversuppression' => 1 },
            { 'Complex oversuppression' => 1 },
            { 'Oversuppression enhancement' => 1 },
            { 'Phenotype bias' => 1 },
            { 'Biased suppression' => 1 },
            { 'Biased enhancement' => 1 },
            { 'Complex phenotype bias' => 1 },
            { 'No interaction' => 1 },
        ]},
    ];

    edgeHash = {}; # keys are edge types
    FOREACH obj IN EDGES;
        type = obj.type;
        edgeHash.$type = 1;
    END;
    edgeColors = ["#0A6314", "#08298A","#B40431","#FF8000", "#00E300","#05C1F0", "#8000FF", "#69088A", "#B58904", "#E02D8A", "#FFFC2E"];
    colorBinding = {};
    FOREACH key IN edgeHash.keys;
        ind = loop.index;
        colorBinding.$key = key == 'Predicted' ? '#888' : edgeColors.$ind;
    END;

%]

[% MACRO cyto_checkbox(name, value, color) BLOCK;
    IF value == 'Predicted';
        color = '#888';
        lineLegend = '<small><b>- -</b></small>';
        checkboxCls = 'cyto_predict';
    ELSE;
        lineLegned = '<b>&ndash;</b>';
    END;
    colorBinding.$value = color;
# macro continued below..
%]
    <input type="checkbox" name="[% name %]" value="[% value %]" class="[% checkboxCls %]">
    <span style="color:[% color %]">
        [% lineLegend _ value %]
    </span><br />
[% END %]



[% colorIndex = 0; %]

      <h6>Click, hold for 1 second, and drag to pan</h6>
      <h6>Use the scroll wheel to zoom</h6>

      <div id="cyto_legend" class="detail-box ui-corner-all">
        <p><center><h3>Legend</h3></center></p>
        [% IF TYPES.keys %]

            <h4> Interaction types</h4>


            <input type="checkbox" name="interactionToggle">  <span style="font-weight:bold">All ON/OFF</span><br />
            [%
            FOREACH type1 IN master;
                key = type1.keys.0;
                IF type1.$key == 1 && edgeHash.$key == 1;
                    edgeHash.$key = 0;
                    cyto_checkbox('type', key, edgeColors.$colorIndex);
                    colorIndex = colorIndex + 1;
                ELSIF type1.$key != 1;
                    '<span style="display:inline-block;">' _ key _ '</span>';
                    '<div style="margin-left:14px" >';
                    FOREACH type2 IN type1.$key;
                        key2 = type2.keys.0;
                        IF edgeHash.$key2 == 1;
                            edgeHash.$key2 = 0;
                            cyto_checkbox('type', key2, edgeColors.$colorIndex);
                            colorIndex = colorIndex + 1;
                        END;
                    END;
                    '</div>';
                END;
            END;

            FOREACH type IN edgeHash.keys;
                IF edgeHash.$type == 1;
                    cyto_checkbox('type', type, edgeColors.$colorIndex);
                    colorIndex = colorIndex + 1;
                END;
            END;

        END;
        %]

        [% IF PHENOTYPES.keys %]
            <h4> Phenotypes</h4>
            <div >
            <input type="checkbox" name="phenotypeToggle">  <span style="font-weight:bold">All ON/OFF</span><br />
            [% FOREACH phenotype IN PHENOTYPES.keys.sort %]
                <input type="checkbox" name="phenotype" value="[% PHENOTYPES.$phenotype.label %]">
                <span><b>&ndash;</b> [% PHENOTYPES.$phenotype.label %] </span><br />

            [% END %]
            </div>
        [% END %]



        <h4>Directions</h4>
        <div>
          <input type="checkbox" name="direction" value="Effector->Affected"> <b>&#8594;</b> Effector -> Affected<br />
          <input type="checkbox" name="direction" value="non-directional"> <b>&ndash;</b> Non-directional<br />
        </div>

        [% IF NTYPES.keys.size > 1 %]
        <h4>Interactor types</h4>
        <div>
            [% FOREACH obj IN NTYPES.keys.sort %]
            <input type="checkbox" name="nodes" value="[% obj %]"> [%
                val = obj.replace('_', ' ');
                IF val == 'Text'; val = 'Other'; END;
                val; %]
            <br />
            [% END %]
        </div>
        [% END %]


        [% IF EDGES.sort('nearby').last.nearby == 1 %]
        <p>
          <h4><input type="checkbox" name="nearby" value="nearby"> Nearby interactions</h4>
        </p>
        [% END %]
      </div>



      <div id="resizable" class="ui-widget-content" style="float:left">

          <div id="cy" >

          </div>

      </div>


      <br style="clear:both"/>

[%- content -%]
    [%# Must implement arbor.js here, it uses web workers and
    will not work when combined with other JS %]
    <script src="/static-bypass/cytoscapejs/arbor/0.91/arbor.js"></script>
    <script type="text/javascript">
    (function(){
      var data = {
            nodes: [
                [% FOREACH node IN NODES.keys.sort %]
                    { data: {
                        id: "[% NODES.$node.label %]",
                        name: "[% NODES.$node.label %]",
                        number:[% loop.index %],
                        ntype: "[%  NODES.$node.class.replace('_', ' ') %]",
                        link:"[% get_url(NODES.$node.class, NODES.$node.id ,NODES.$node.taxonomy) %]",
                        predicted: [% NODES.$node.predicted %],
                        [% IF NODES.$node.main %]
                        mainNode: true
                        [% END %]
                    }},
                [% END %]
            ],
            edges:[
                [% FOREACH obj IN EDGES %]
                    { data: {
                    id: "e[% loop.count %]",
                    label: "[% obj.interaction.id %]" ,
                    source: "[% obj.effector.label %]",
                    target: "[% obj.affected.label %]",
                    type: "[% obj.type %]",
                    direction:"[% obj.direction %]",
                    width: [% obj.interactions.size %],
                    phenotype: "[% obj.phenotype.label %]",
                    nearby: [% obj.nearby %],
                    color: "[% type = obj.type; colorBinding.$type || '#000000' %]"
                    }},
                [% END %]
            ],
            [%#
                = Custom cytoscape mappers =
                * elementType: nodes or edges
                * attr: some key under data[elementType][i].data
                * mapping: obj mapping oldVal: newVal for attr
                * (toType): new values will be put into this attr, if attr
                *   itself shouldn't be touched
            %]
            mappers:[
                {
                    elementType: 'nodes',
                    attribute: 'ntype',
                    toType: 'shape',
                    mapping: {
                        rearrangement: "hexagon",
                    [%#    gene: "octagon", %]
                        molecule: "triangle",
                        feature: "rectangle",
                        other: "ellipse"
                    }
                }
            ],
        },
        types = [ [% FOREACH obj IN TYPES.keys.sort %]
                          "[% obj %]",
                    [% END %] ]
        WB.setupCytoscapeInteraction(data, types [% IF CLASSTYPE; ', "'; CLASSTYPE; '"'; END; %]);

    })();
    </script>
